Email Support with Flask-Mail

The extension connects to a Simple Mail Transfer Protocol (SMTP) server
and passes emails to it for delivery. If no configuration is given, Flask-Mail
connects to localhost at port 25 and sends email without authentication.
Table 6-1 shows the list of configuration keys that can be used to configure
the SMTP server.

Table 6-1. Flask-Mail SMTP server configuration keys

Key Default             Description
MAIL_HOSTNAME           localhost Hostname or IP address of the email server
MAIL_PORT               25 Port of the email server
MAIL_USE_TLS            False Enable Transport Layer Security (TLS) security
MAIL_USE_SSL            False Enable Secure Sockets Layer (SSL) security
MAIL_USERNAME           None Mail account username
MAIL_PASSWORD           None Mail account password

TIP
Never write account credentials directly in your scripts, particularly if you plan to
release your work as open source. To protect your account information, have your script
import sensitive information from the environment.

Example 6-1. hello.py: Flask-Mail configuration for Gmail
import os
# ...
app.config['MAIL_SERVER'] = 'smtp.googlemail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')

For Microsoft Windows users, the environment variables are set as follows:
(venv) $ set MAIL_USERNAME=<Gmail username>
(venv) $ set MAIL_PASSWORD=<Gmail password>

Integrating Emails with the Application

The function relies on two application-specific configuration keys that
define a prefix string for the subject and the address that will be used as
sender. The send_email function takes the destination address, a subject
line, a template for the email body, and a list of keyword arguments. The
template name must be given without the extension, so that two versions of
the template can be used for the plain- and rich-text bodies. The keyword
arguments passed by the caller are given to the render_template() calls
so that they can be used by the templates that generate the email body.

The recipient of the email is given in the FLASKY_ADMIN environment
variable loaded into a configuration variable of the same name during
startup. Two template files need to be created for the text and HTML
versions of the email. These files are stored in a mail subfolder inside
templates to keep them separate from regular templates. The email
templates expect the user to be given as a template argument, so the call to
send_email() includes it as a keyword argument.

Sending Asynchronous Email

This implementation highlights an interesting problem. Many Flask
extensions operate under the assumption that there are active application
and request contexts. Flask-Mailâ€™s send() function uses current_app, so it
requires the application context to be active. But when the mail.send()
function executes in a different thread, the application context needs to be
created artificially using app.app_context().
If you run the application now, you will notice that it is much more
responsive, but keep in mind that for applications that send a large volume
of email, having a job dedicated to sending email is more appropriate than
starting a new thread for every email. For example, the execution of the
send_async_email() function can be sent to a Celery task queue.

